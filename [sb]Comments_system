---------- Système de notes et de commentaires ----------

Au cours de mon travail et de mes projets personnels j'ai développé un petit système de notation de différents éléments.
    Ce n'est pas un système très poussé mais je pense qu'il a du potentiel et même qu'il peut s'avérer utile dans un
    contexte professionnel et qu'il peut même se voir intégrer un système d'intégration continu afin de prendre différents cas en compte.
    Étant donné que je pense que ce petit système (qui se verra compléter au fils des cas rencontrés) efficace, je vous le partage.
    Cela vous permettra éventuellement de le mettre en place, de le tester afin de l'éprouver et surtout de l'améliorer.
    Cela vous permettra également si il ne vous convient pas tout à fait de vous en inspirer pour créer votre propre système.

----- Plan -----
1 - Généralités
2 - Balises
    1 - #D
    2 - #E
    3 - #T
    4 - #S
    5 - #TODO
    6 - #M
    7 - #I
-----


----- 1 - Généralités -----
Les différentes notations sont sous forme de balises. Ces balises se trouvent principalement en commentaire.
    Elles aident donc à la documentation du code mais également aux tests et au débogagge.
    Les balises sont courtes et ont toujours la même structure: le caractère # suivi (=collé) d'une lettre en majuscule.
    Plus tard et en fonction des cas la lettre pourra être remplacée par d'autres caractères (chiffres, caractères spéciaux, ...).
    Il faudra cependant veiller à ne pas utiliser ces balises (ou alors à les modifier)
    si elles sont des "combinaisons" spéciales relatives à l'éditeur utilisé ou au langage employé.
-----

Je n'ai pas cherché à aller plus loin étant donné que j'ai créé ce système au fur et à mesure de mes expériences sans forcément
    vouloir, pour l'instant, être exhaustif dans les cas possibles. Il est donc probable que vous trouviez d'autres balises ayant
    leurs utilités. Je vous encourage donc à faire remonter vos idées pour qu'un maximum puisse en bénéficier.

----- 2 - Les balises -----

--- 1 - #D
La balise #D est la seule qui ne s'utilise pas dans des commentaires.
    Le D étant la première lettre de Débogagge je me sers de cette balise dans des chaînes de caractères.
    Parfois une application génère de nombreux logs dans sa console (ou équivalent) et s'y retrouver peut être difficile.
    Cette balise s'avèrera utile uniquement pour celles et ceux qui programmes sur des éditeurs de texte (SublimeText, ...) et
    non des IDE (Eclipse, ...) ou qui n'ont pas l'habitude d'utiliser les outils de débogagge proposés par les IDE.
    Elle s'utilise donc dans les chaînes de caractères de test (consultation de valeur, savoir si le programme passe
    effectivement par tel ou tel bloc, ...) afin de ne pas en perdre l'origine. En effet à force d'affichages, parfois
    peu explicites, on peut en perdre l'origine. Cette balise est présente pour éviter cela.
    
Structure de la suite du message: Voici un exemple générique de l'utilisation de cette balise.
    "#D nomFichier l.numLigneAffichage [: Message complémentaire (affichage de variables, ...)]"
   
Par l'utilisation de cette balise il devient très simple de retrouver l'origine, dans le code, de son affichage.
Le numéro de la ligne peut éventuellement être mis à jour si l'on ajoute ou supprime du code en amont de l'affichage.
    Cependant personnellement je ne le fais pas car ce numéro de changeait que peu dans mes cas de figure
    (une dizaine de lignes au maximum).
Enfin de reconnais que cette balise est un peu lourde à mettre en place à cause de la longueur de son affichage minimal.
    Pour compenser en partie cela il est simplement possible de faire des copier-collés.
    Cependant il faut faire attention de bien modifier le numéro de la ligne et éventuellement le nom du fichier à chaque
    collé pour ne pas perdre la ligne.
---

--- 2 - #E
Signifiant Erreur, cette balise se met en commentaire de ligne devant une instruction ou le bloc
    provoquant une erreur (le partie défaillante est aussi en commentaire). Elle peut bien entendu
    être suivie d'un commentaire expliquant l'erreur.
    
Exemple d'utilisation (java):
// #E Boucle infini for(i = 0 ; i >= 0 ; i++);

Cette balise permet de rapidement mettre des erreurs de côté tout en pouvant les retrouver rapidement.
---

--- 3 - #T
Signifiant Test, cette balise sert à marquer les blocs de programmes utilisé pour les tests.
Cette balise s'utilise par paire (ex en pseudo-java):
/* #T Test de variable */
...
/* Instructions effectuant le test */
...
/* #T end */

La première balise est donc constituée de #T suivi éventuellement d'une explication de l'utilité du test.
    En cas de travail à plusieurs (comme souvent) il peut également être intéressant de noter le créateur de cette balise.
La deuxième sert simplement à marquer la fin de la zone de test, et ceux pour éviter de supprimer des instructions par inadvertance.

Cette balise est très utile en cas de travail à plusieurs sur un même fichier. Chacun peut rapidement identifier les zones de test,
    même en n'en étant pas le créateur.
---

--- 4 - #S
Signifiant Stub (Bouchon en français), cette balise se place encore une fois en commentaire.
Placé à la suite d'une instruction ou d'un bloc bouchon, elle permet de signifier de fait et
    de les retrouver plus facilement par la suite pour les implémenter.
    Comme toujours il est possible et conseillé d'ajouter à la suite de la balise une
    explication pour clarifier l'utilisation du bouchon.
    
Exemple:
return true; // #S stub return
---

--- 5 - #TODO
Cette balise n'est pas construite en un seul caractère pour une bonne raison. Le mot TODO est très répandu dans
    le milieu de l'informatique. Donc si comme moi vous utilisez ce système de balise à titre personnel mais
    dans un milieu professionnel. L'utilisation du mot TODO permet aux autres membres de l'équipe de trouver vos TODO dans le
    code et ce même si ils n'utilisent pas le système des balises. Ce qui n'aurait pas été possible si l'on avait créé
    une nouvelle balise.
Sauf si vous êtes novice, ce mot vous ai forcément familier. Pour ceux qui ne saurait pas les TODO sont des tâches qu'il faut exécuter.
    Cette balise, en commentaire, permet donc de signifier qu'une partie doit être modifiée ou que des éléments doivent y être ajoutés
    pour la rendre fonctionnelle.
A noter que dans certains cas le choix d'un #TODO ou d'un #S sera à l'appréciation du développeur car très similaire,
    en effet l'utilisation d'un bouchon implique souvent qu'une fonctionnalité doivent être développée plus tard.
    
Exemple d'utilisation:
// #TODO implement password = uncrypt(cryptePassword);
Exemple d'utilisation ambïgue:
string addressFrom = "adresse@expediteur.extension", // #S value
Qui peut être remplacé par:
string addressFrom = "adresse@expediteur.extension", // #TODO Get the address

Cette balise s'avère très utile pour marquer un endroit dans le programme qui
    n'est pas abouti mais dont la finalisation n'est pas prioritaire.
---

--- 6 - #M
Signifie Mark. Permet simplement d'installer une note dans le code.
    Cela peut être une simple note ou pour marquer un bloc de progamme.

Exemple d'utilisation:
// #M Début du bloc
...
// #M Fin du bloc
---

--- 7 - #I
Signifie Important. Permet de noter un élément important.

Exemples d'utilisation:
... /* #I Do not delete */
/* #I #TODO Sécuriser la transaction */
---

--- 8 - #V
Signifie A Vérigier. Permet de marquer un point que l'on veut contrôler ou faire contrôler.

Exemples d'utilisation:
La terre fait 43000km de circonférence (#V).
---
-----
